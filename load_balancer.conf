worker_processes auto;

events {
    # Số kết nối tối đa mà mỗi worker process có thể xử lý đồng thời
    worker_connections 1024;
}

http {
    # Định nghĩa nhóm các server backend (các instance API server của bạn)
    upstream ridehailing_backend {
        # Sử dụng 'least_conn' để gửi request đến server có ít kết nối hoạt động nhất
        # thường hiệu quả hơn 'round-robin' (mặc định) cho ứng dụng web.
        least_conn;

        # Đảm bảo các cổng này khớp với cổng sẽ chạy waitress-serve
        server localhost:5001; # Instance 1
        server localhost:5002; # Instance 2
        server localhost:5003; # Instance 3
    }

    # Cấu hình cho server ảo mà Nginx sẽ lắng nghe
    server {
        # Nginx sẽ lắng nghe trên cổng 8080 (Bạn có thể đổi cổng này nếu muốn)
        # JMeter sẽ gửi request đến cổng này
        listen 8080;
        server_name localhost; # Tên server

        # Thiết lập timeout để tránh lỗi nếu backend xử lý lâu
        proxy_connect_timeout 10s;
        proxy_send_timeout    30s;
        proxy_read_timeout    30s; # Tăng nếu request /dispatch cần > 30s

        # Cấu hình chuyển tiếp request đến nhóm backend
        location / {
            proxy_pass http://ridehailing_backend; # Tên upstream bạn đã định nghĩa

            # Các header quan trọng để backend nhận biết client gốc
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Tắt buffering nếu muốn dữ liệu được chuyển tiếp ngay lập tức
            # proxy_buffering off;
        }
    }
}